# app/telegram_bot.py
# -*- coding: utf-8 -*-
"""
YouTube Comment Consultant - Telegram –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤ YouTube.
–ü–µ—Ä—Å–æ–Ω–∞: –≤–≤—ñ—á–ª–∏–≤–∏–π, —Ç–∞–∫—Ç–æ–≤–Ω–∏–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –¥–ª—è –∞–≤—Ç–æ—Ä—ñ–≤ YouTube-–∫–∞–Ω–∞–ª—ñ–≤.
"""

import os
import asyncio
import json
from typing import Dict, Any, List, Optional
from urllib.parse import urlparse

# Telegram –±–æ—Ç
from aiogram import Bot, Dispatcher, types
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command, CommandStart
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.utils.markdown import hbold, hitalic, hcode

# –ù–∞—à –ø–∞–π–ø–ª–∞–π–Ω
from app.tools.analyze_video_tool import analyze_video_tool, search_comments_for_qa
from app.tools.classification_db import get_topic_quotes, get_latest_analysis_data
from app.tools.topics_taxonomy import ID2NAME
from app.tools.topics_llm import get_client, get_model

# AI-–∞–≥–µ–Ω—Ç —Å–∏—Å—Ç–µ–º–∞
from app.agent_system import process_agent_message, extract_video_id_from_message, is_youtube_related_message

try:
    from logger import logger
except Exception:
    import logging
    logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s: %(message)s")
    logger = logging.getLogger("telegram_bot")

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("–í—ñ–¥—Å—É—Ç–Ω—è –∑–º—ñ–Ω–Ω–∞ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ TELEGRAM_BOT_TOKEN")

bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —á–µ—Ä–Ω–µ—Ç–æ–∫
DRAFT_RULES_CALM = """–¢–∏ ‚Äî –≤–≤—ñ—á–ª–∏–≤–∏–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç YouTube –∫–∞–Ω–∞–ª—É. –ù–∞–ø–∏—à–∏ –ö–û–†–û–¢–ö–£ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∞–≤—Ç–æ—Ä—É –∫–∞–Ω–∞–ª—É –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤ –≥–ª—è–¥–∞—á—ñ–≤.

–¢–æ–Ω: —Å–ø–æ–∫—ñ–π–Ω–∏–π, –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–π, —Ç–∞–∫—Ç–æ–≤–Ω–∏–π
–î–æ–≤–∂–∏–Ω–∞: –º–∞–∫—Å–∏–º—É–º 280 —Å–∏–º–≤–æ–ª—ñ–≤
–°—Ç–∏–ª—å: –±–µ–∑ —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç—ñ, –±–µ–∑ –Ω–∞–¥–º—ñ—Ä–Ω–∏—Ö –æ–±—ñ—Ü—è–Ω–æ–∫, –ø–æ —Å—É—Ç—ñ

–ü–æ–≤–µ—Ä–Ω–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å —É JSON —Ñ–æ—Ä–º–∞—Ç—ñ:
{
  "draft": "—Ç–µ–∫—Å—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –¥–æ 280 —Å–∏–º–≤–æ–ª—ñ–≤"
}"""

DRAFT_RULES_PLAYFUL = """–¢–∏ ‚Äî –¥—Ä—É–∂–µ–ª—é–±–Ω–∏–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç YouTube –∫–∞–Ω–∞–ª—É. –ù–∞–ø–∏—à–∏ –ö–û–†–û–¢–ö–£ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∞–≤—Ç–æ—Ä—É –∫–∞–Ω–∞–ª—É –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤ –≥–ª—è–¥–∞—á—ñ–≤.

–¢–æ–Ω: –∂–∞—Ä—Ç—ñ–≤–ª–∏–≤–∏–π, –ª–µ–≥–∫–∏–π, –¥—Ä—É–∂–µ–ª—é–±–Ω–∏–π (–∞–ª–µ –Ω–µ —Ç–æ–∫—Å–∏—á–Ω–∏–π)
–î–æ–≤–∂–∏–Ω–∞: –º–∞–∫—Å–∏–º—É–º 280 —Å–∏–º–≤–æ–ª—ñ–≤
–°—Ç–∏–ª—å: –∑ –≥—É–º–æ—Ä–æ–º, –∞–ª–µ –±–µ–∑ –æ–±—Ä–∞–∑, –ø–æ —Å—É—Ç—ñ

–ü–æ–≤–µ—Ä–Ω–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å —É JSON —Ñ–æ—Ä–º–∞—Ç—ñ:
{
  "draft": "—Ç–µ–∫—Å—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –¥–æ 280 —Å–∏–º–≤–æ–ª—ñ–≤"
}"""

# –°—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ (–¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É —Ç–∞ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è URL)
user_states: Dict[int, Dict[str, Any]] = {}

@dp.message(CommandStart())
async def start_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ /start - –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è —Ç–∞ –ø—ñ–¥–∫–∞–∑–∫–∏."""
    
    # –û—á–∏—â–∞—î–º–æ —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (—Å–∫–∞—Å–æ–≤—É—î–º–æ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è URL)
    user_id = message.from_user.id
    logger.info(f"üèÅ /start command from user {user_id} (@{message.from_user.username})")
    
    if user_id in user_states:
        user_states[user_id].pop("waiting_for_url", None)
    
    welcome_text = f"""
ü§ñ –í—ñ—Ç–∞—é! –Ø <b>YouTube Comment Consultant</b> ‚Äî AI-–∞–≥–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤.

<b>–Ø –∞–≤—Ç–æ–Ω–æ–º–Ω–∏–π –∞–≥–µ–Ω—Ç, —è–∫–∏–π:</b>
‚Ä¢ üéØ <b>–°–∞–º–æ—Å—Ç—ñ–π–Ω–æ –≤–∏—Ä—ñ—à—É—î</b> —è–∫—ñ –¥—ñ—ó –ø–æ—Ç—Ä—ñ–±–Ω—ñ
‚Ä¢ üìä <b>–ê–Ω–∞–ª—ñ–∑—É—î –≤—ñ–¥–µ–æ</b> –∫–æ–ª–∏ –≤–∏ –Ω–∞–¥—Å–∏–ª–∞—î—Ç–µ YouTube URL
‚Ä¢ üîç <b>–í—ñ–¥–ø–æ–≤—ñ–¥–∞—î –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è</b> –≤–∏–∫–ª—é—á–Ω–æ –∑ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤
‚Ä¢ üìà <b>–ü–æ–∫–∞–∑—É—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É</b> –∑ —Ä–µ–∞–ª—å–Ω–∏–º–∏ —Ü–∏—Ç–∞—Ç–∞–º–∏
‚Ä¢ üí° <b>–î–∞—î –ø–æ—Ä–∞–¥–∏</b> –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ä–µ–∞–∫—Ü—ñ—ó –≥–ª—è–¥–∞—á—ñ–≤

<b>–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à—ñ—Ç—å –º–µ–Ω—ñ:</b>
‚Ä¢ YouTube –ø–æ—Å–∏–ª–∞–Ω–Ω—è ‚Üí –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑—É—é
‚Ä¢ "–©–æ –¥—É–º–∞—é—Ç—å –ø—Ä–æ –∑–≤—É–∫?" ‚Üí –∑–Ω–∞–π–¥—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å
‚Ä¢ "–ü–æ–∫–∞–∂–∏ —Ç–æ–ø —Ç–µ–º–∏" ‚Üí –¥–∞–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
‚Ä¢ "–î–µ—Ç–∞–ª—ñ –ø—Ä–æ –∫—Ä–∏—Ç–∏–∫—É" ‚Üí –ø–æ–∫–∞–∂—É —Ü–∏—Ç–∞—Ç–∏

<b>–û—Å–æ–±–ª–∏–≤–æ—Å—Ç—ñ:</b>
üéØ –í—ñ–¥–ø–æ–≤—ñ–¥–∞—é <b>—Ç—ñ–ª—å–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤</b>
üá∫üá¶ –ü—ñ–¥—Ç—Ä–∏–º—É—é —É–∫—Ä–∞—ó–Ω—Å—å–∫—É —Ç–∞ —ñ–Ω—à—ñ –º–æ–≤–∏
üö´ –ù–µ –≤–∏–≥–∞–¥—É—é, —á–µ—Å–Ω–æ –∫–∞–∂—É —è–∫—â–æ –¥–∞–Ω–∏—Ö –Ω–µ–º–∞—î

<i>–ù–∞–¥—ñ—à–ª—ñ—Ç—å YouTube –ø–æ—Å–∏–ª–∞–Ω–Ω—è –∞–±–æ –∑–∞–¥–∞–π—Ç–µ –ø–∏—Ç–∞–Ω–Ω—è!</i> üöÄ
"""
    
    await message.answer(welcome_text)

@dp.message(Command("analyze"))
async def analyze_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ /analyze - –∞–Ω–∞–ª—ñ–∑ YouTube –≤—ñ–¥–µ–æ."""
    
    # –í–∏—Ç—è–≥–∞—î–º–æ URL –∑ –∫–æ–º–∞–Ω–¥–∏
    command_text = message.text or ""
    parts = command_text.split(maxsplit=1)
    user_id = message.from_user.id
    
    logger.info(f"üìä /analyze command from user {user_id} (@{message.from_user.username})")
    
    if len(parts) < 2:
        # –Ø–∫—â–æ URL –Ω–µ –≤–∫–∞–∑–∞–Ω–æ - –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –≤ —Ä–µ–∂–∏–º –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è
        user_states[user_id] = {"waiting_for_url": True}
        
        await message.answer(
            "üé¨ <b>–ê–Ω–∞–ª—ñ–∑ YouTube –≤—ñ–¥–µ–æ</b>\n\n"
            "üìé <b>–ù–∞–¥—ñ—à–ª—ñ—Ç—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –≤—ñ–¥–µ–æ:</b>\n"
            "‚Ä¢ –ü–æ–≤–Ω–∏–π URL: <code>https://www.youtube.com/watch?v=...</code>\n"
            "‚Ä¢ –ö–æ—Ä–æ—Ç–∫–∏–π URL: <code>https://youtu.be/...</code>\n"
            "‚Ä¢ –¢—ñ–ª—å–∫–∏ ID: <code>dQw4w9WgXcQ</code>\n\n"
            "üí° <i>–ê–±–æ —Å–∫–∞—Å—É–π—Ç–µ –∫–æ–º–∞–Ω–¥–æ—é /start</i>"
        )
        return
    
    url_or_id = parts[1].strip()
    
    # –û—á–∏—â–∞—î–º–æ —Å—Ç–∞–Ω –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è URL
    if user_id in user_states:
        user_states[user_id].pop("waiting_for_url", None)
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –∞–Ω–∞–ª—ñ–∑
    await process_video_analysis(message, url_or_id, user_id)

async def process_video_analysis(message: types.Message, url_or_id: str, user_id: int):
    """–û–±—Ä–æ–±–ª—è—î –∞–Ω–∞–ª—ñ–∑ –≤—ñ–¥–µ–æ —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç."""
    
    # –ü–æ–∫–∞–∑—É—î–º–æ —â–æ –ø—Ä–∞—Ü—é—î–º–æ
    status_message = await message.answer("üîÑ <b>–ê–Ω–∞–ª—ñ–∑—É—é –≤—ñ–¥–µ–æ...</b>\n–¶–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ –¥–æ —Ö–≤–∏–ª–∏–Ω–∏.")
    
    try:
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ –∞–Ω–∞–ª—ñ–∑
        result = analyze_video_tool(
            url_or_id,
            limit=1200,
            sqlite_path="./.cache.db",
            fast_mode=True,
            force_reanalyze=False
        )
        
        if not result["success"]:
            await status_message.edit_text(
                f"‚ùå <b>–ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É:</b>\n{result.get('error', '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞')}"
            )
            return
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        if user_id not in user_states:
            user_states[user_id] = {}
        
        user_states[user_id].update({
            "last_analysis": result,
            "video_id": result["video_id"]
        })
        user_states[user_id].pop("waiting_for_url", None)  # –û—á–∏—â–∞—î–º–æ —Å—Ç–∞–Ω –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è
        
        # –§–æ—Ä–º—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
        video_id = result["video_id"]
        stats = result["stats"]
        topics = result["topics"]
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        response_text = f"‚úÖ <b>–ê–Ω–∞–ª—ñ–∑ –≤—ñ–¥–µ–æ {video_id} –∑–∞–≤–µ—Ä—à–µ–Ω–æ</b>\n\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        if result.get("from_cache"):
            response_text += "üìä <i>–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏</i>\n"
        else:
            response_text += f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            response_text += f"‚Ä¢ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ: {stats['total_fetched']} –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤\n"
            response_text += f"‚Ä¢ –ü—Ä–æ–∞–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–æ: {stats['classified']} –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤\n"
        
        response_text += f"\nüèÜ <b>–¢–æ–ø-{len(topics)} —Ç–µ–º:</b>\n"
        
        # –¢–æ–ø —Ç–µ–º–∏ –∑ —Ü–∏—Ç–∞—Ç–∞–º–∏
        for i, topic in enumerate(topics, 1):
            share_percent = topic["share"] * 100
            response_text += f"\n{i}. <b>{topic['name']}</b> ‚Äî {share_percent:.1f}% (~{topic['count']})\n"
            
            # –ö–æ—Ä–æ—Ç–∫–∞ —Ü–∏—Ç–∞—Ç–∞
            if topic.get("top_quote"):
                quote = topic["top_quote"][:120]
                if len(topic["top_quote"]) > 120:
                    quote += "..."
                response_text += f"   üí¨ <i>{quote}</i>\n"
        
        # –Ü–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏
        keyboard = InlineKeyboardBuilder()
        
        # –ö–Ω–æ–ø–∫–∏ –¥–µ—Ç–∞–ª–µ–π –¥–ª—è –∫–æ–∂–Ω–æ—ó —Ç–µ–º–∏
        for topic in topics[:3]:  # –ü–µ—Ä—à—ñ 3 —Ç–µ–º–∏
            keyboard.add(InlineKeyboardButton(
                text=f"üìù {topic['name'][:20]}",
                callback_data=f"details:{video_id}:{topic['topic_id']}"
            ))
        
        keyboard.adjust(1)  # –ü–æ –æ–¥–Ω—ñ–π –∫–Ω–æ–ø—Ü—ñ –≤ —Ä—è–¥–∫—É –¥–ª—è –¥–µ—Ç–∞–ª–µ–π
        
        # –ö–Ω–æ–ø–∫–∏ —á–µ—Ä–Ω–µ—Ç–æ–∫
        keyboard.row(
            InlineKeyboardButton(
                text="‚úçÔ∏è –ß–µ—Ä–Ω–µ—Ç–∫–∏ (—Å–ø–æ–∫—ñ–π–Ω–∏–π)",
                callback_data=f"draft:{video_id}:calm"
            ),
            InlineKeyboardButton(
                text="üé≠ –ß–µ—Ä–Ω–µ—Ç–∫–∏ (–∂–∞—Ä—Ç—ñ–≤–ª–∏–≤–∏–π)", 
                callback_data=f"draft:{video_id}:playful"
            )
        )
        
        await status_message.edit_text(
            response_text,
            reply_markup=keyboard.as_markup()
        )
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ process_video_analysis: {e}")
        await status_message.edit_text(
            f"‚ùå <b>–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞:</b>\n{str(e)}"
        )

@dp.message(Command("ask"))
async def ask_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ /ask - Q&A –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤."""
    
    # –í–∏—Ç—è–≥–∞—î–º–æ –ø–∏—Ç–∞–Ω–Ω—è –∑ –∫–æ–º–∞–Ω–¥–∏
    command_text = message.text or ""
    parts = command_text.split(maxsplit=1)
    
    if len(parts) < 2:
        await message.answer(
            "‚ùå <b>–ü–æ–º–∏–ª–∫–∞:</b> –ü–æ—Å—Ç–∞–≤—Ç–µ –ø–∏—Ç–∞–Ω–Ω—è.\n\n"
            "<b>–ü—Ä–∏–∫–ª–∞–¥:</b>\n"
            "<code>/ask –©–æ –¥—É–º–∞—é—Ç—å –ø—Ä–æ —è–∫—ñ—Å—Ç—å –∑–≤—É–∫—É?</code>"
        )
        return
    
    question = parts[1].strip()
    user_id = message.from_user.id
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –æ—Å—Ç–∞–Ω–Ω—ñ–π –∞–Ω–∞–ª—ñ–∑
    if user_id not in user_states or "video_id" not in user_states[user_id]:
        await message.answer(
            "‚ùå <b>–°–ø–æ—á–∞—Ç–∫—É –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π—Ç–µ –≤—ñ–¥–µ–æ</b>\n\n"
            "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ <code>/analyze URL</code> –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –≤—ñ–¥–µ–æ, "
            "–∞ –ø–æ—Ç—ñ–º –∑–∞–¥–∞–≤–∞–π—Ç–µ –ø–∏—Ç–∞–Ω–Ω—è –ø—Ä–æ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ."
        )
        return
    
    video_id = user_states[user_id]["video_id"]
    
    # –ü–æ–∫–∞–∑—É—î–º–æ —â–æ —à—É–∫–∞—î–º–æ
    status_message = await message.answer(f"üîç <b>–®—É–∫–∞—é –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞:</b>\n<i>{question}</i>")
    
    try:
        # –®—É–∫–∞—î–º–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ñ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ
        relevant_comments = search_comments_for_qa(
            video_id=video_id,
            question=question,
            sqlite_path="./.cache.db",
            max_results=5
        )
        
        if not relevant_comments:
            await status_message.edit_text(
                f"ü§∑‚Äç‚ôÇÔ∏è <b>–í–∏–±–∞—á—Ç–µ, –Ω–µ –∑–Ω–∞–π—à–æ–≤ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ</b>\n\n"
                f"<b>–í–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è:</b> <i>{question}</i>\n\n"
                "üí° <b>–°–ø—Ä–æ–±—É–π—Ç–µ:</b>\n"
                "‚Ä¢ –ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª—é–≤–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è\n"
                "‚Ä¢ –í–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ —ñ–Ω—à—ñ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞\n"
                "‚Ä¢ –ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —ñ–Ω—à–µ –≤—ñ–¥–µ–æ –∑ –±—ñ–ª—å—à–æ—é –∫—ñ–ª—å–∫—ñ—Å—Ç—é –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤"
            )
            return
        
        # –§–æ—Ä–º—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∑–Ω–∞–π–¥–µ–Ω–∏—Ö –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤
        response_text = f"üí¨ <b>–û—Å—å —â–æ –∫–∞–∂—É—Ç—å –≥–ª—è–¥–∞—á—ñ:</b>\n\n"
        response_text += f"<b>–ü–∏—Ç–∞–Ω–Ω—è:</b> <i>{question}</i>\n\n"
        
        for i, comment in enumerate(relevant_comments, 1):
            text = comment["text"][:300]
            if len(comment["text"]) > 300:
                text += "..."
            
            like_indicator = ""
            if comment["like_count"] > 0:
                like_indicator = f" ({comment['like_count']} ‚ù§Ô∏è)"
            
            response_text += f"{i}. <b>{comment['author']}</b>{like_indicator}:\n"
            response_text += f"   <i>\"{text}\"</i>\n\n"
        
        response_text += "üìù <i>–í—ñ–¥–ø–æ–≤—ñ–¥—å —Å–∫–ª–∞–¥–µ–Ω–∞ –≤–∏–∫–ª—é—á–Ω–æ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤ –ø—ñ–¥ –≤—ñ–¥–µ–æ.</i>"
        
        await status_message.edit_text(response_text)
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ ask_command: {e}")
        await status_message.edit_text(
            f"‚ùå <b>–ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É:</b>\n{str(e)}"
        )

@dp.callback_query()
async def handle_callbacks(callback: CallbackQuery):
    """–û–±—Ä–æ–±–Ω–∏–∫ —ñ–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫."""
    
    if not callback.data:
        return
    
    parts = callback.data.split(":")
    if len(parts) < 3:
        return
    
    action = parts[0]
    video_id = parts[1]
    param = parts[2]
    
    user_id = callback.from_user.id
    logger.info(f"üîò Callback {action}:{param} from user {user_id} (@{callback.from_user.username})")
    
    try:
        if action == "details":
            # –ü–æ–∫–∞–∑—É—î–º–æ –¥–µ—Ç–∞–ª—ñ —Ç–µ–º–∏
            await show_topic_details(callback, video_id, param)
            
        elif action == "draft":
            # –ì–µ–Ω–µ—Ä—É—î–º–æ —á–µ—Ä–Ω–µ—Ç–∫–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
            await generate_drafts(callback, video_id, param)
            
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ handle_callbacks: {e}")
        await callback.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∫–Ω–æ–ø–∫–∏", show_alert=True)

async def show_topic_details(callback: CallbackQuery, video_id: str, topic_id: str):
    """–ü–æ–∫–∞–∑—É—î –¥–µ—Ç–∞–ª—ñ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó —Ç–µ–º–∏."""
    
    await callback.answer("–ó–∞–≤–∞–Ω—Ç–∞–∂—É—é –¥–µ—Ç–∞–ª—ñ...")
    
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ —Ü–∏—Ç–∞—Ç–∏ –¥–ª—è —Ç–µ–º–∏
        quotes = get_topic_quotes(
            video_id=video_id,
            topic_id=topic_id,
            sqlite_path="./.cache.db",
            limit=3
        )
        
        topic_name = ID2NAME.get(topic_id, topic_id)
        
        if not quotes:
            await callback.message.answer(
                f"üìù <b>–î–µ—Ç–∞–ª—ñ: {topic_name}</b>\n\n"
                "‚ö†Ô∏è –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤ –¥–ª—è —Ü—ñ—î—ó —Ç–µ–º–∏."
            )
            return
        
        response_text = f"üìù <b>–î–µ—Ç–∞–ª—ñ: {topic_name}</b>\n\n"
        response_text += f"<b>–ù–∞–π–ø–æ–ø—É–ª—è—Ä–Ω—ñ—à—ñ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ ({len(quotes)}):</b>\n\n"
        
        for i, quote in enumerate(quotes, 1):
            text = quote["text"][:250]
            if len(quote["text"]) > 250:
                text += "..."
            
            like_indicator = ""
            if quote["like_count"] > 0:
                like_indicator = f" ({quote['like_count']} ‚ù§Ô∏è)"
            
            response_text += f"{i}. <b>{quote['author']}</b>{like_indicator}:\n"
            response_text += f"   <i>\"{text}\"</i>\n\n"
        
        # –ö–Ω–æ–ø–∫–∞ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è
        keyboard = InlineKeyboardBuilder()
        keyboard.add(InlineKeyboardButton(
            text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –¥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤",
            callback_data=f"back:{video_id}"
        ))
        
        await callback.message.answer(
            response_text,
            reply_markup=keyboard.as_markup()
        )
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ show_topic_details: {e}")
        await callback.message.answer(
            f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π: {str(e)}"
        )

async def generate_drafts(callback: CallbackQuery, video_id: str, tone: str):
    """–ì–µ–Ω–µ—Ä—É—î —á–µ—Ä–Ω–µ—Ç–∫–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π —É –≤–∫–∞–∑–∞–Ω–æ–º—É —Ç–æ–Ω—ñ."""
    
    await callback.answer("–ì–µ–Ω–µ—Ä—É—é —á–µ—Ä–Ω–µ—Ç–∫–∏...")
    
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–æ–ø –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ –¥–ª—è –≤—ñ–¥–µ–æ
        analysis_data = get_latest_analysis_data(video_id, "./.cache.db")
        
        if "error" in analysis_data:
            await callback.message.answer(
                f"‚ùå –ü–æ–º–∏–ª–∫–∞: {analysis_data['error']}"
            )
            return
        
        topics = analysis_data.get("topics", [])[:3]  # –¢–æ–ø-3 —Ç–µ–º–∏
        
        if not topics:
            await callback.message.answer(
                "‚ö†Ô∏è –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Ç–µ–º –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —á–µ—Ä–Ω–µ—Ç–æ–∫."
            )
            return
        
        # –§–æ—Ä–º—É—î–º–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è LLM
        context_text = f"–ê–Ω–∞–ª—ñ–∑ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤ YouTube –≤—ñ–¥–µ–æ {video_id}:\n\n"
        
        for i, topic in enumerate(topics, 1):
            context_text += f"{i}. {topic['name']}: {topic['count']} –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤ ({topic['share']*100:.1f}%)\n"
            if topic.get('top_quote'):
                context_text += f"   –ü—Ä–∏–∫–ª–∞–¥: {topic['top_quote'][:150]}\n"
        
        # –í–∏–±–∏—Ä–∞—î–º–æ –ø—Ä–∞–≤–∏–ª–∞ –∑–∞ —Ç–æ–Ω–æ–º
        rules = DRAFT_RULES_CALM if tone == "calm" else DRAFT_RULES_PLAYFUL
        
        # –ì–µ–Ω–µ—Ä—É—î–º–æ 2 –≤–∞—Ä—ñ–∞–Ω—Ç–∏ —á–µ—Ä–µ–∑ LLM
        await callback.message.answer("ü§ñ –ì–µ–Ω–µ—Ä—É—é —á–µ—Ä–Ω–µ—Ç–∫–∏, –∑–∞—á–µ–∫–∞–π—Ç–µ...")
        
        drafts = await generate_response_drafts(context_text, rules)
        
        if not drafts:
            await callback.message.answer(
                "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —á–µ—Ä–Ω–µ—Ç–∫–∏. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."
            )
            return
        
        # –§–æ—Ä–º—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
        tone_emoji = "üòå" if tone == "calm" else "üòÑ"
        tone_name = "–°–ø–æ–∫—ñ–π–Ω–∏–π" if tone == "calm" else "–ñ–∞—Ä—Ç—ñ–≤–ª–∏–≤–∏–π"
        
        response_text = f"{tone_emoji} <b>–ß–µ—Ä–Ω–µ—Ç–∫–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π ({tone_name} —Ç–æ–Ω)</b>\n\n"
        
        for i, draft in enumerate(drafts, 1):
            response_text += f"<b>–í–∞—Ä—ñ–∞–Ω—Ç {i}:</b>\n"
            response_text += f"<i>\"{draft}\"</i>\n\n"
        
        response_text += "üí° <i>–ß–µ—Ä–Ω–µ—Ç–∫–∏ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω—ñ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∞–Ω–∞–ª—ñ–∑—É –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤. "
        response_text += "–í—ñ–¥—Ä–µ–¥–∞–≥—É–π—Ç–µ —ó—Ö –∑–∞ –ø–æ—Ç—Ä–µ–±–æ—é –ø–µ—Ä–µ–¥ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—î—é.</i>"
        
        await callback.message.answer(response_text)
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ generate_drafts: {e}")
        await callback.message.answer(
            f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —á–µ—Ä–Ω–µ—Ç–æ–∫: {str(e)}"
        )

async def generate_response_drafts(context: str, rules: str) -> List[str]:
    """–ì–µ–Ω–µ—Ä—É—î 2 –≤–∞—Ä—ñ–∞–Ω—Ç–∏ —á–µ—Ä–Ω–µ—Ç–æ–∫ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —á–µ—Ä–µ–∑ LLM."""
    
    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ API –∫–ª—é—á
        if not os.getenv("OPENROUTER_API_KEY"):
            return []
        
        import openai
        client = openai.AsyncOpenAI(
            base_url="https://openrouter.ai/api/v1",
            api_key=os.getenv("OPENROUTER_API_KEY")
        )
        
        model = get_model()
        drafts = []
        
        # –ì–µ–Ω–µ—Ä—É—î–º–æ 2 –≤–∞—Ä—ñ–∞–Ω—Ç–∏
        for i in range(2):
            response = await asyncio.wait_for(
                client.chat.completions.create(
                    model=model,
                    temperature=0.4,  # –¢—Ä–æ—Ö–∏ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—ñ
                    messages=[
                        {"role": "system", "content": rules},
                        {"role": "user", "content": context}
                    ],
                    response_format={"type": "json_object"},
                    max_tokens=300
                ),
                timeout=30.0
            )
            
            content = response.choices[0].message.content
            
            try:
                data = json.loads(content)
                draft = data.get("draft", "").strip()
                if draft and len(draft) <= 280:
                    drafts.append(draft)
            except json.JSONDecodeError:
                logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø–∞—Ä—Å–∏—Ç–∏ JSON –≤—ñ–¥–ø–æ–≤—ñ–¥—å: {content}")
        
        await client.close()
        return drafts
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —á–µ—Ä–Ω–µ—Ç–æ–∫: {e}")
        return []

# –û–±—Ä–æ–±–∫–∞ –∑–≤–∏—á–∞–π–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —á–µ—Ä–µ–∑ AI-–∞–≥–µ–Ω—Ç–∞
@dp.message()
async def handle_message(message: types.Message):
    """–û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —á–µ—Ä–µ–∑ AI-–∞–≥–µ–Ω—Ç–∞ –∑ function calling."""
    
    user_id = message.from_user.id
    text = (message.text or "").strip()
    
    if not text:
        await message.answer("‚ùå –ù–∞–¥—ñ—à–ª—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ç–µ–∫—Å—Ç–æ–º.")
        return
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –æ—á—ñ–∫—É—î URL –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É (legacy —Ä–µ–∂–∏–º)
    if user_id in user_states and user_states[user_id].get("waiting_for_url"):
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ —Å—Ö–æ–∂–µ –Ω–∞ URL –∞–±–æ video_id
        if any(keyword in text.lower() for keyword in ["youtube.com", "youtu.be"]) or len(text) == 11:
            # –°—Ö–æ–∂–µ –Ω–∞ YouTube URL –∞–±–æ video_id - –æ–±—Ä–æ–±–ª—è—î–º–æ —á–µ—Ä–µ–∑ –∞–≥–µ–Ω—Ç–∞
            user_states[user_id].pop("waiting_for_url", None)
        else:
            # –ù–µ —Å—Ö–æ–∂–µ –Ω–∞ YouTube URL
            await message.answer(
                "‚ùì <b>–¶–µ –Ω–µ —Å—Ö–æ–∂–µ –Ω–∞ YouTube –ø–æ—Å–∏–ª–∞–Ω–Ω—è</b>\n\n"
                "üìé <b>–ü—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω—ñ —Ñ–æ—Ä–º–∞—Ç–∏:</b>\n"
                "‚Ä¢ <code>https://www.youtube.com/watch?v=dQw4w9WgXcQ</code>\n"
                "‚Ä¢ <code>https://youtu.be/dQw4w9WgXcQ</code>\n"
                "‚Ä¢ <code>dQw4w9WgXcQ</code>\n\n"
                "üí° –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ /start –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è."
            )
            return
    
    # –ü–æ–∫–∞–∑—É—î–º–æ —â–æ –∞–≥–µ–Ω—Ç –¥—É–º–∞—î
    status_message = await message.answer("ü§ñ <i>–û–±—Ä–æ–±–ª—è—é –≤–∞—à –∑–∞–ø–∏—Ç...</i>")
    
    logger.info(f"üì® Processing message from user {user_id} (@{message.from_user.username}): {text[:100]}...")
    
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π video_id –∑ —Å—Ç–∞–Ω—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        current_video_id = None
        if user_id in user_states and "video_id" in user_states[user_id]:
            current_video_id = user_states[user_id]["video_id"]
            logger.info(f"üé¨ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤—ñ–¥–µ–æ: {current_video_id}")
        
        # –û–±—Ä–æ–±–ª—è—î–º–æ —á–µ—Ä–µ–∑ AI-–∞–≥–µ–Ω—Ç–∞ –∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
        response = await process_agent_message(text, user_id, current_video_id)
        
        # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —è–∫—â–æ –∑–Ω–∞–π–¥–µ–Ω–æ video_id
        video_id = extract_video_id_from_message(text)
        if video_id:
            if user_id not in user_states:
                user_states[user_id] = {}
            user_states[user_id]["video_id"] = video_id
            user_states[user_id].pop("waiting_for_url", None)
            logger.info(f"üíæ Saved video_id {video_id} for user {user_id}")
        
        logger.info(f"üì§ Sending response to user {user_id} ({len(response)} chars)")
        await status_message.edit_text(response)
        
    except Exception as e:
        logger.error(f"Agent processing error: {e}")
        await status_message.edit_text(
            "‚ùå <b>–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∑–∞–ø–∏—Ç—É</b>\n\n"
            "–°–ø—Ä–æ–±—É–π—Ç–µ:\n"
            "‚Ä¢ –ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª—é–≤–∞—Ç–∏ –∑–∞–ø–∏—Ç\n"
            "‚Ä¢ –í–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –∫–æ–º–∞–Ω–¥–∏ /start –∞–±–æ /analyze\n"
            "‚Ä¢ –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—É"
        )

async def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞."""
    
    logger.info("ü§ñ –ó–∞–ø—É—Å–∫–∞—é YouTube Comment Consultant AI-–∞–≥–µ–Ω—Ç–∞...")
    logger.info(f"üîß –ú–æ–¥–µ–ª—å –∞–≥–µ–Ω—Ç–∞: {os.getenv('AGENT_MODEL', 'google/gemini-2.5-flash')}")
    logger.info(f"üîß –ú–æ–¥–µ–ª—å –∫–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ—ó: {os.getenv('MODEL_SUMMARY', 'openai/gpt-4o-mini')}")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
    required_vars = ["TELEGRAM_BOT_TOKEN", "OPENROUTER_API_KEY"]
    missing_vars = [var for var in required_vars if not os.getenv(var)]
    
    if missing_vars:
        logger.error(f"‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞: {missing_vars}")
        return
    
    if not os.getenv("YOUTUBE_API_KEY"):
        logger.warning("‚ö†Ô∏è –í—ñ–¥—Å—É—Ç–Ω—è YOUTUBE_API_KEY - –º–æ–∂–ª–∏–≤—ñ –ø—Ä–æ–±–ª–µ–º–∏ –∑ –Ω–æ–≤–∏–º–∏ –≤—ñ–¥–µ–æ")
    
    logger.info("‚úÖ –í—Å—ñ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ")
    logger.info(f"üîë OpenRouter API: {os.getenv('OPENROUTER_API_KEY')[:20]}...") 
    logger.info(f"ü§ñ Bot token: {BOT_TOKEN[:20]}...")
    
    try:
        # –í–∏–¥–∞–ª—è—î–º–æ webhook —è–∫—â–æ —î
        await bot.delete_webhook(drop_pending_updates=True)
        logger.info("üóëÔ∏è Webhook –æ—á–∏—â–µ–Ω–æ")
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –±–æ—Ç–∞
        me = await bot.get_me()
        logger.info(f"ü§ñ –ë–æ—Ç @{me.username} (ID: {me.id}) –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏!")
        logger.info("üì± –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –º–æ–∂—É—Ç—å –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ /start –¥–ª—è –ø–æ—á–∞—Ç–∫—É")
        logger.info("üé¨ –ê–±–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ YouTube –ø–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É")
        
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ polling
        logger.info("üîÑ –ó–∞–ø—É—Å–∫–∞—é polling...")
        await dp.start_polling(bot)
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
    finally:
        await bot.session.close()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üëã –ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É: {e}")
